version: "3.9"
services:
  web:
    image: ghcr.io/gallereee/web:${IMAGE_TAG}
    env_file:
      - ./.env
    environment:
      PORT: ${WEB_PORT}
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    restart: always

  api:
    image: ghcr.io/gallereee/api:${IMAGE_TAG}
    env_file:
      - ./.env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public"
      IAM_HOST: "iam"
      PMS_HOST: "pms"
    volumes:
      - logs-api:/app/logs
    ports:
      - "${API_PORT}:${API_PORT}"
    networks:
      - iam
      - pms
    restart: always

  tg-bot:
    image: ghcr.io/gallereee/tg-bot:${IMAGE_TAG}
    env_file:
      - ./.env
    environment:
      QUEUE_REDIS_URL: "redis://:${TG_BOT_REDIS_PASSWORD}@tg-bot-redis:${TG_BOT_REDIS_PORT}"
      IAM_HOST: "iam"
      PMS_HOST: "pms"
    ports:
      - "${BOT_PORT}:${BOT_PORT}"
    volumes:
      - logs-tg-bot:/app/logs
    depends_on:
      tg-bot-redis:
        condition: service_started
    networks:
      - tg-bot-redis
      - iam
      - pms
    restart: always

  iam:
    image: ghcr.io/gallereee/iam:${IMAGE_TAG}
    env_file:
      - ./.env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public"
    volumes:
      - logs-iam:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - iam
      - postgres
    restart: always

  pms:
    image: ghcr.io/gallereee/pms:${IMAGE_TAG}
    env_file:
      - ./.env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public"
    volumes:
      - logs-pms:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pms
      - postgres
    restart: always

  postgres:
    image: postgres
    env_file:
      - ./.env
    command: "-p ${POSTGRES_PORT}"
    environment:
      - PGDATA=/data/postgres
    volumes:
      - postgres:/data/postgres
    networks:
      - postgres
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -p $$POSTGRES_PORT -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  tg-bot-redis:
    image: redis
    env_file:
      - ./.env
    command: "redis-server --appendonly yes --requirepass ${TG_BOT_REDIS_PASSWORD} --port ${TG_BOT_REDIS_PORT}"
    volumes:
      - tg-bot-redis:/data
    networks:
      - tg-bot-redis
    restart: always

networks:
  tg-bot-redis:
  postgres:
  iam:
  pms:

volumes:
  logs-api:
  logs-tg-bot:
  logs-iam:
  logs-pms:
  postgres:
  tg-bot-redis:
